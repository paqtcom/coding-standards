#!/usr/bin/env php
<?php
$possibleFiles = [__DIR__.'/../../autoload.php', __DIR__.'/../autoload.php', __DIR__.'/vendor/autoload.php'];
$file = null;
foreach ($possibleFiles as $possibleFile) {
    if (file_exists($possibleFile)) {
        $file = $possibleFile;

        break;
    }
}

if (null === $file) {
    throw new RuntimeException('Unable to locate autoload.php file.');
}

require_once $file;

use PaqtCom\CodingStandards\CodingStandardGenerator;

if ($argc < 2) {
    echo "Usage: " . $argv[0] . " folder1,folder2" . PHP_EOL;
    exit(1);
}

function getEnvironment($name) {
    if (array_key_exists($name, $_SERVER)) {
        return (string) $_SERVER[$name];
    }
    if (array_key_exists($name, $_ENV)) {
        return (string) $_ENV[$name];
    }
    return getenv($name);
}
function determineRootPath() {
    if (class_exists(\Composer\Factory::class)) {
        return dirname(\Composer\Factory::getComposerFile());
    }
    if ($path = getEnvironment('COMPOSER')) {
        return $path;
    }
    $path = dirname(dirname(__DIR__));
    if ($_composer_autoload_path ?? null) {
        $path = dirname($_composer_autoload_path);
    }
    while (strlen($path) > 2 && !file_exists($path . '/composer.json')) {
        $path = dirname($path);
    }
    return $path;
}

$rootPath = determineRootPath();
CodingStandardGenerator::updatePhpstanConfig($rootPath, explode(',', $argv[1]));